/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IOptionTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burnUnsoldTokens"
      | "collateral"
      | "executeOption"
      | "executionPrice"
      | "executionWindowSize"
      | "expiration"
      | "fixPrice"
      | "isFullyExecuted"
      | "optionType"
      | "paymentToken"
      | "premium"
      | "priceFixed"
      | "purchaseOption"
      | "pythAddress"
      | "pythAssetId"
      | "startPrice"
      | "strikePrice"
      | "totalSold"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ExecutionPriceFixed"
      | "FullyExecuted"
      | "OptionExecuted"
      | "OptionPurchased"
      | "Transfer"
      | "UnsoldTokensBurned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnUnsoldTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionWindowSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fixPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isFullyExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "premium", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFixed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pythAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pythAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnUnsoldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionWindowSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFullyExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "optionType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "premium", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFixed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pythAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pythAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionPriceFixedEvent {
  export type InputTuple = [price: BigNumberish];
  export type OutputTuple = [price: bigint];
  export interface OutputObject {
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FullyExecutedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OptionExecutedEvent {
  export type InputTuple = [
    executor: AddressLike,
    payout: BigNumberish,
    burnedAmount: BigNumberish
  ];
  export type OutputTuple = [
    executor: string,
    payout: bigint,
    burnedAmount: bigint
  ];
  export interface OutputObject {
    executor: string;
    payout: bigint;
    burnedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OptionPurchasedEvent {
  export type InputTuple = [buyer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [buyer: string, amount: bigint];
  export interface OutputObject {
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsoldTokensBurnedEvent {
  export type InputTuple = [
    owner: AddressLike,
    amount: BigNumberish,
    collateralReturned: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    amount: bigint,
    collateralReturned: bigint
  ];
  export interface OutputObject {
    owner: string;
    amount: bigint;
    collateralReturned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOptionToken extends BaseContract {
  connect(runner?: ContractRunner | null): IOptionToken;
  waitForDeployment(): Promise<this>;

  interface: IOptionTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burnUnsoldTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  collateral: TypedContractMethod<[], [bigint], "view">;

  executeOption: TypedContractMethod<[], [void], "nonpayable">;

  executionPrice: TypedContractMethod<[], [bigint], "view">;

  executionWindowSize: TypedContractMethod<[], [bigint], "view">;

  expiration: TypedContractMethod<[], [bigint], "view">;

  fixPrice: TypedContractMethod<[], [void], "nonpayable">;

  isFullyExecuted: TypedContractMethod<[], [boolean], "view">;

  optionType: TypedContractMethod<[], [bigint], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  premium: TypedContractMethod<[], [bigint], "view">;

  priceFixed: TypedContractMethod<[], [boolean], "view">;

  purchaseOption: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pythAddress: TypedContractMethod<[], [string], "view">;

  pythAssetId: TypedContractMethod<[], [string], "view">;

  startPrice: TypedContractMethod<[], [bigint], "view">;

  strikePrice: TypedContractMethod<[], [bigint], "view">;

  totalSold: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnUnsoldTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeOption"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executionPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executionWindowSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "expiration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixPrice"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isFullyExecuted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "optionType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "premium"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceFixed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "purchaseOption"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pythAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pythAssetId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "strikePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionPriceFixed"
  ): TypedContractEvent<
    ExecutionPriceFixedEvent.InputTuple,
    ExecutionPriceFixedEvent.OutputTuple,
    ExecutionPriceFixedEvent.OutputObject
  >;
  getEvent(
    key: "FullyExecuted"
  ): TypedContractEvent<
    FullyExecutedEvent.InputTuple,
    FullyExecutedEvent.OutputTuple,
    FullyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OptionExecuted"
  ): TypedContractEvent<
    OptionExecutedEvent.InputTuple,
    OptionExecutedEvent.OutputTuple,
    OptionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OptionPurchased"
  ): TypedContractEvent<
    OptionPurchasedEvent.InputTuple,
    OptionPurchasedEvent.OutputTuple,
    OptionPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UnsoldTokensBurned"
  ): TypedContractEvent<
    UnsoldTokensBurnedEvent.InputTuple,
    UnsoldTokensBurnedEvent.OutputTuple,
    UnsoldTokensBurnedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ExecutionPriceFixed(uint256)": TypedContractEvent<
      ExecutionPriceFixedEvent.InputTuple,
      ExecutionPriceFixedEvent.OutputTuple,
      ExecutionPriceFixedEvent.OutputObject
    >;
    ExecutionPriceFixed: TypedContractEvent<
      ExecutionPriceFixedEvent.InputTuple,
      ExecutionPriceFixedEvent.OutputTuple,
      ExecutionPriceFixedEvent.OutputObject
    >;

    "FullyExecuted()": TypedContractEvent<
      FullyExecutedEvent.InputTuple,
      FullyExecutedEvent.OutputTuple,
      FullyExecutedEvent.OutputObject
    >;
    FullyExecuted: TypedContractEvent<
      FullyExecutedEvent.InputTuple,
      FullyExecutedEvent.OutputTuple,
      FullyExecutedEvent.OutputObject
    >;

    "OptionExecuted(address,uint256,uint256)": TypedContractEvent<
      OptionExecutedEvent.InputTuple,
      OptionExecutedEvent.OutputTuple,
      OptionExecutedEvent.OutputObject
    >;
    OptionExecuted: TypedContractEvent<
      OptionExecutedEvent.InputTuple,
      OptionExecutedEvent.OutputTuple,
      OptionExecutedEvent.OutputObject
    >;

    "OptionPurchased(address,uint256)": TypedContractEvent<
      OptionPurchasedEvent.InputTuple,
      OptionPurchasedEvent.OutputTuple,
      OptionPurchasedEvent.OutputObject
    >;
    OptionPurchased: TypedContractEvent<
      OptionPurchasedEvent.InputTuple,
      OptionPurchasedEvent.OutputTuple,
      OptionPurchasedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UnsoldTokensBurned(address,uint256,uint256)": TypedContractEvent<
      UnsoldTokensBurnedEvent.InputTuple,
      UnsoldTokensBurnedEvent.OutputTuple,
      UnsoldTokensBurnedEvent.OutputObject
    >;
    UnsoldTokensBurned: TypedContractEvent<
      UnsoldTokensBurnedEvent.InputTuple,
      UnsoldTokensBurnedEvent.OutputTuple,
      UnsoldTokensBurnedEvent.OutputObject
    >;
  };
}
